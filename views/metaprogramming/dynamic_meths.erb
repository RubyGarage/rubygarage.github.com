<section class="slide" id="dynamic_meths">
  <h2>Calling methods dynamically</h2>
  <p>The most common way for dynamic method calling is to send   a message to object.</p><br/><br/>
  <script type="syntaxhighlighter" class="brush: ruby">
      <![CDATA["hi there".send(:length)  #=> 8]]>
  </script>
  <br/>
  <p>A Method object represents a chunk of code and a context in which it executes. Once we have our Method object, we can execute it sometime later by sending it the message call.</p>
  <br/>
  <script type="syntaxhighlighter" class="brush: ruby">
      <![CDATA[
method_object = "hi there".method(:length)
method_object.call  #=> 8  ]]>
  </script>
  <br/>
  <p>Or just eval</p>
  <br/>
  <script type="syntaxhighlighter" class="brush: ruby">
      <![CDATA[eval "'hi there'.length"  #=> 8]]>
  </script>
  <br/>
  <p>Instantiating a method object is the fastest dynamic way in calling a method, eval is the slowest one. Also when sending a message to an object, or when instantiating a method object, you can call private methods of that object.</p>
  
</section>