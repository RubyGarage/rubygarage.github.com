<section id="chaining" class="slide">
  <h2>Spec::Matchers</h2>
  <h3>Chaining custom matchers</h3>
  <p>You can also create matchers that obey a fluent interface using the chain method:</p>

  <script type="syntaxhighlighter" class="brush: ruby">
    <![CDATA[
      RSpec::Matchers.define :have_errors_on do |attribute|
        chain :with_message do |message|
          @message = message
        end
       
        match do |model|
          model.valid?
       
          @has_errors = model.errors.key?(attribute)
       
          if @message
            @has_errors && model.errors[attribute].include?(@message)
          else
            @has_errors
          end
        end
      end
    ]]>
  </script>

  <p>And now it can be used as follows:</p>
    <script type="syntaxhighlighter" class="brush: ruby">
    <![CDATA[
      describe User do
        before { subject.email = "foobar" }
       
        it { should have_errors_on(:email).with_message("Email has an invalid format") }
      end
    ]]>
  </script>
</section>