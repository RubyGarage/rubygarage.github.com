<section id="how-rack-works" class="slide">
  <div class="vcenter">
    <h1>How it works?</h1>
  </div>
</section>

<section id="rack-stack" class="slide">
  <h4>Stack of middlewares</h4>
  <p>
    Variable with request goes trough stack of middleares, unless one of them will return array. (Instead of claiing another).<br />
    We will check last middleware. It's our app.
  </p>
  <p>
    They are pushed during configuration phase
  </p>
  <img src="/assets/rack/middlewares-stack.png" />

  <p>
    And request goes troug each one
  </p>
  <img src="/assets/rack/middlewares-call.png" />
</section>

<section id="rack-response" class="slide">
  <h4>What should we respond?</h4>

  <p>
    An Array containing:
    <ol>
      <li>HTTP status code</li>
      <li>Hash of headers</li>
      <li>Array with responce body</li>
    </ol>
  </p>
  <script type="syntaxhighlighter" class="brush: ruby">
    <![CDATA[
# Block, we pass env variable to
proc do |env|
  [ 200,
    {'Content-Type' => 'text/plain'},
    ["Hello"]
  ]
end

# Class with method #call
class MyApp
  def call(env)
    [ 200,
      {'Content-Type' => 'text/plain'},
      ["Hello"]
    ]
  end
end
    ]]>
  </script>

</section>

<section id="helper-classes" class="slide">
  <h4>Array?! It's Ruby. It's can't be so borring!</h4>

  <p>
    There are classes <code>Rack::Request</code> and <code>Rack::Response</code>.<br />
    <strong>Rack::Request</strong> provides a convenient interface to a Rack environment.
    It is stateless, the environment "env" passed to the constructor will be directly modified.<br />
    <strong>Rack::Response</strong> provides a convenient interface to create a Rack response.
    It allows setting of headers and cookies, and provides useful defaults (a OK response containing HTML).
    Your application's "call" should end returning Response#finish.
  </p>
</section>

<section id="helper-example" class="slide">
  <h4>Let's try it.</h4>

  <script type="syntaxhighlighter" class="brush: ruby">
    <![CDATA[
app = proc do |env|
  req = Rack::Request.new(env)
  res = Rack::Response.new

  res.write("You GET me!") if req.get?
  res['Content-Type'] = 'text/plain'

  res.finish
end
    ]]>
  </script>

  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
$ curl http://127.0.0.1:8765
You GET me!
$
]]>
  </script>
</section>

<section id="write-middleware" class="slide">
  <h4>Try to create own middleware</h4>

  <p>
    In this example we will try to do authentication middleware.
  </p>

  <script type="syntaxhighlighter" class="brush: ruby">
    <![CDATA[
class Authenticator
  def initialize(app, options={})
    @app = app # save app somewhere, so we can chain call
    self
  end

  def call(env)
    if (env['HTTP_AUTH'] || "").strip == "secret"
      @app.call(env)
    else
      Rack::Response.new("Unauthenticated", 401).finish
    end
  end
end

use Authenticator

app = proc do |env|
  Rack::Response.new("Passed", 200).finish
end

run app
    ]]>
  </script>

  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
$ curl http://127.0.0.1:9292
Unauthenticated
$ curl -H "Auth: secret" http://127.0.0.1:9292
Passed
$
    ]]>
  </script>

</section>
