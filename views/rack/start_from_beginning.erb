<section id="start-from-beginning" class="slide">
  <div class="vcenter">
    <h1>Hmm... Is there any magic?</h1>
  </div>
</section>

<section id="go-deeper-0" class="slide">
  <div class="vcenter">
    <img src="/assets/rack/go-deeper.png" />
  </div>
</section>

<section id="go-deeper-1" class="slide">
  <div class="vcenter">
    <h1>WE HAVE TO GO DEEPER!</h1>
  </div>
</section>

<section id="level-0" class="slide">
  <h4>Prepare yourself</h4>
  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
    mkdir follow-the-rack && cd follow-the-rack
    rvm --create --rvmrc 1.9.3@follow-the-rack
    cd .
  ]]>
    </script>

  <p>
    Gemfile
  </p>
  <script type="syntaxhighlighter" class="brush: ruby">
    <![CDATA[
  source :rubygems

  gem "rack"
  gem "debugger"
  ]]>
    </script>

  <p>
    Install
  </p>
  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
  bundle
  ]]>
    </script>

  <p>
    config.ru
  </p>
  <script type="syntaxhighlighter" class="brush: ruby">
    <![CDATA[
require 'bundler/setup'

app = lambda do |env|
          Rack::Response.new('Hello').finish
        end
run app
  ]]>
</script>

<p>
  Start app with "rackup"
</p>
  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
$ rackup
[2013-02-10 22:03:22] INFO  WEBrick 1.3.1
[2013-02-10 22:03:22] INFO  ruby 1.9.3 (2012-11-10) [x86_64-darwin11.4.2]
[2013-02-10 22:03:22] INFO  WEBrick::HTTPServer#start: pid=64350 port=9292
  ]]>
</script>

<p>
  Open Rack gem sources
</p>

  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
$ EDITOR=mvim bundle open rack
  ]]>
</script>
</section>

<section id="level-1" class="slide">
  <h4>What happened, when we started this command?</h4>
  <br />
  <p>
    <strong>1.</strong> Invoke of <code>Rack::Server.start</code> <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/bin/rackup#L4">bin/rackup#L4</a>
  </p>
  <p>
    <strong>2.</strong> Create new instance of <code>Rack::Server</code> and send "start" <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/server.rb#L141">lib/rack/server.rb#L141</a>
  </p>
  <p>
    <strong>3.</strong> Start will do many things. But we are interested in <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/server.rb#L250">creating app</a> and <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/server.rb#L264">starting a server</a>. <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/server.rb#L225">lib/rack/server.rb#L225</a>
  </p>
  <p>
    <strong>4.1.</strong> Build app and options from config. Use <code>Rack::Builder</code> to parse "config.ru" <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/server.rb#L277">lib/rack/server.rb#L277</a><br />
    <strong>4.2.</strong> Finalize build by chaining middlewares <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/server.rb#L304">lib/rack/server.rb#L304</a>
  </p>
  <p>
    <strong>5.</strong> Find supported server to run application. It uses <code>Rack::Handler</code> <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/server.rb#L268">lib/rack/server.rb#L268</a>
  </p>
</section>

<section id="level-2" class="slide">
  <h4>Where can I find a server?</h4>
  <br />
  <p>
    <strong>1.</strong> <code>Rack::Handler</code> will try to guess best server to start our app. <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/handler.rb#L46">lib/rack/handler.rb#L46</a><br />
    <strong>2.</strong> It will try to pick any of Thin, Puma, WEBrick. In our example, we have WEBrick. <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/handler.rb#L34">lib/rack/handler.rb#L34</a>
  </p>
  <p>
    <strong>3.</strong> After server is picked, it will receive <code>run</code> <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/handler/webrick.rb#L8">lib/rack/handler/webrick.rb#L8</a><br />
    There is a manual on WEBrick: <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick.html">stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick</a>
  </p>
</section>

<section id="going-to-request" class="slide">
  <h4>Wooh! We made it. Now we see in console...</h4>
  <br />
  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
[2013-02-10 22:03:22] INFO  WEBrick 1.3.1
[2013-02-10 22:03:22] INFO  ruby 1.9.3 (2012-11-10) [x86_64-darwin11.4.2]
[2013-02-10 22:03:22] INFO  WEBrick::HTTPServer#start: pid=64350 port=9292
  ]]>
</script>
</section>

<section id="http-request" class="slide">
  <h4>The HTTP request</h4>
  <p>
    Let's request a URL by curl... What will it send?
  </p>

  <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
$ curl -iv http://127.0.0.1:9999/
  * About to connect() to 127.0.0.1 port 9999 (#0)
  *   Trying 127.0.0.1... connected
  * Connected to 127.0.0.1 (127.0.0.1) port 9999 (#0)
  > GET / HTTP/1.1
  > User-Agent: curl/7.21.4 (universal-apple-darwin11.0) ↩
      libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
  > Host: 127.0.0.1:9292
  > Accept: */*
  ]]>
    </script>

</section>

<section id="webrick-level" class="slide">
  <h4>What will happen, after WEBrick receives data trough TCP socket?</h4>
  <br />
  <p>
    At the end, it will call <code>service</code> method.<br />
    The handler we used, was inherited from <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick/HTTPServlet/AbstractServlet.html">WEBrick::HTTPServlet::AbstractServlet</a><br />
    But "service" method was re-defined in Rack handler <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/handler/webrick.rb#L34">lib/rack/handler/webrick.rb#L34</a>
  </p>
  <p>
    It receives two params of classes <code>WEBrick::HTTPRequest</code> and <code>WEBrick::HTTPResponse</code> passed to the method.<br />
    The magic is done by <code>WEBrick::HTTPRequest.meta_vars</code>. This method provides hash with variables defined by the revision 3 of “The WWW Common Gateway Interface Version 1.1”
  </p>
  <p>
    App is called in <a href="https://github.com/rack/rack/blob/7b535cd7ce78eaaaec99cd2677ad8dd5962019a4/lib/rack/handler/webrick.rb#L60">60th line</a>.
    And we get response, that is written to <code>res</code> parameter.
  </p>
</section>

<section id="thats-all-folks" class="slide">
  <div class="vcenter">
    <img src="/assets/rack/thatsallfolks.png" />
  </div>
</section>
